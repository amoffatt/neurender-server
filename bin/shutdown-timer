#!/usr/bin/python3

import os
import subprocess
import time
from datetime import datetime, timedelta
import argparse

# Define path to the shutdown time file
shutdown_time_file_path = os.path.expanduser("~/.shutdown-time")

def write_shutdown_time(hours):
    shutdown_time = datetime.now() + timedelta(hours=hours)
    with open(shutdown_time_file_path, "w") as f:
        f.write(shutdown_time.strftime("%Y-%m-%d %H:%M:%S"))

def check_shutdown_time():
    with open(shutdown_time_file_path, "r") as f:
        shutdown_time = datetime.strptime(f.read().strip(), "%Y-%m-%d %H:%M:%S")
    return datetime.now() > shutdown_time

def run_cli_command(command):
    # instance_id = os.environ['VAST_CONTAINERLABEL'][2:]
    # command = f"vastai stop instance {instance_id}"
    subprocess.run(command, shell=True)

def main():
    parser = argparse.ArgumentParser("Start a shutdown timer for this container")
    parser.add_argument("--hours", type=float, default=6, help="Hours til shutdown. Shutdown time will be stored in {shutdown_time_file_path}")
    parser.add_argument("--set", action="store_true", help="Set the time for currently running timer, but don't start a new one")
    parser.add_argument("--command", type=str, default="", help="Run a specific command to shutdown the container")
    args = parser.parse_args()

    write_shutdown_time(hours=args.hours)

    if args.set:
        return

    while True:
        time.sleep(60) # Check every minute

        if check_shutdown_time():
            run_cli_command(args.command)
            break


if __name__ == "__main__":
    main()
